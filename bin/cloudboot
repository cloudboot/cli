#!/usr/bin/env python
import os

import click
from InquirerPy.utils import color_print
from pyfiglet import figlet_format
from termcolor import cprint

from cloudboot.enum.ColorCode import ColorCode
from cloudboot.inquiry.auth import ensure_gcloud_credentials
from cloudboot.service.gcloud.cloud_functions import deploy_functions, list_local_functions
from cloudboot.inquiry.cloud_functions import init_cloud_function, select_and_deploy_function

from cloudboot.config import reset_root
from cloudboot.service.core.config import initialize_cloudboot_project, reload_cache
from cloudboot.inquiry.project import init_cloud_project


@click.group()
def cloudboot():
    pass


@cloudboot.command(help='Build Cloud Bootstrapper directories and cache.')
def init():
    cprint(figlet_format('CloudBoot'), 'yellow', attrs=['bold'])
    color_print([(ColorCode.SUCCESS, 'v0.1.0-beta')])
    color_print([(ColorCode.SUCCESS,
                  'A groovy collection of easy-peasy scripts and templates for Google Cloud serverless computing!')])
    ensure_gcloud_credentials()
    initialize_cloudboot_project()
    init_cloud_project()


@cloudboot.command(help='Rebuild/sync Cloud Bootstrapper cache.')
def refresh():
    reload_cache()


@cloudboot.command(help='cloudboot functions --help')
@click.option('-n', '--create', is_flag=True, help='Create new Cloud function.')
@click.option('-l', '--registry', is_flag=True, help='List Cloud functions.')
@click.option('-d', '--deploy', is_flag=True, help='Deploy changed Cloud functions.')
@click.option('-s', '--seldeploy', is_flag=True, help='Select and deploy a Cloud function.')
def functions(create, registry, deploy, seldeploy):
    if create:
        init_cloud_function()
    elif deploy:
        deploy_functions()
    elif registry:
        list_local_functions()
    elif seldeploy:
        select_and_deploy_function()
    else:
        color_print([('', 'Try '), (ColorCode.INFO, 'cloudboot functions --help'), ('', ' for more guidance.')])


if __name__ == '__main__':
    current_dir = os.getcwd()
    reset_root(current_dir)
    cloudboot()
